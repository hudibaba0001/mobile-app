// Mocks generated by Mockito 5.4.5 from annotations
// in myapp/test/viewmodels/customer_analytics_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/features/reports/analytics_models.dart' as _i2;
import 'package:myapp/models/travel_entry.dart' as _i4;
import 'package:myapp/models/work_entry.dart' as _i3;
import 'package:myapp/repositories/travel_repository.dart' as _i8;
import 'package:myapp/repositories/work_repository.dart' as _i7;
import 'package:myapp/services/analytics_api.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeServerAnalytics_0 extends _i1.SmartFake
    implements _i2.ServerAnalytics {
  _FakeServerAnalytics_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkEntry_1 extends _i1.SmartFake implements _i3.WorkEntry {
  _FakeWorkEntry_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTravelEntry_2 extends _i1.SmartFake implements _i4.TravelEntry {
  _FakeTravelEntry_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnalyticsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsApi extends _i1.Mock implements _i5.AnalyticsApi {
  MockAnalyticsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.ServerAnalytics> fetchDashboard({
    DateTime? startDate,
    DateTime? endDate,
    String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDashboard,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
            #userId: userId,
          },
        ),
        returnValue:
            _i6.Future<_i2.ServerAnalytics>.value(_FakeServerAnalytics_0(
          this,
          Invocation.method(
            #fetchDashboard,
            [],
            {
              #startDate: startDate,
              #endDate: endDate,
              #userId: userId,
            },
          ),
        )),
      ) as _i6.Future<_i2.ServerAnalytics>);
}

/// A class which mocks [WorkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkRepository extends _i1.Mock implements _i7.WorkRepository {
  MockWorkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.WorkEntry> getAllForUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getAllForUser,
          [userId],
        ),
        returnValue: <_i3.WorkEntry>[],
      ) as List<_i3.WorkEntry>);

  @override
  List<_i3.WorkEntry> getForUserInRange(
    String? userId,
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForUserInRange,
          [
            userId,
            start,
            end,
          ],
        ),
        returnValue: <_i3.WorkEntry>[],
      ) as List<_i3.WorkEntry>);

  @override
  _i6.Future<_i3.WorkEntry> add(_i3.WorkEntry? entry) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [entry],
        ),
        returnValue: _i6.Future<_i3.WorkEntry>.value(_FakeWorkEntry_1(
          this,
          Invocation.method(
            #add,
            [entry],
          ),
        )),
      ) as _i6.Future<_i3.WorkEntry>);

  @override
  _i3.WorkEntry? getById(String? id) => (super.noSuchMethod(Invocation.method(
        #getById,
        [id],
      )) as _i3.WorkEntry?);

  @override
  _i6.Future<_i3.WorkEntry> update(_i3.WorkEntry? entry) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [entry],
        ),
        returnValue: _i6.Future<_i3.WorkEntry>.value(_FakeWorkEntry_1(
          this,
          Invocation.method(
            #update,
            [entry],
          ),
        )),
      ) as _i6.Future<_i3.WorkEntry>);

  @override
  _i6.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  int getTotalMinutesInRange(
    String? userId,
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalMinutesInRange,
          [
            userId,
            start,
            end,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [TravelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTravelRepository extends _i1.Mock implements _i8.TravelRepository {
  MockTravelRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.TravelEntry> getAllForUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getAllForUser,
          [userId],
        ),
        returnValue: <_i4.TravelEntry>[],
      ) as List<_i4.TravelEntry>);

  @override
  List<_i4.TravelEntry> getForUserInRange(
    String? userId,
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForUserInRange,
          [
            userId,
            start,
            end,
          ],
        ),
        returnValue: <_i4.TravelEntry>[],
      ) as List<_i4.TravelEntry>);

  @override
  _i6.Future<_i4.TravelEntry> add(_i4.TravelEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [entry],
        ),
        returnValue: _i6.Future<_i4.TravelEntry>.value(_FakeTravelEntry_2(
          this,
          Invocation.method(
            #add,
            [entry],
          ),
        )),
      ) as _i6.Future<_i4.TravelEntry>);

  @override
  _i4.TravelEntry? getById(String? id) => (super.noSuchMethod(Invocation.method(
        #getById,
        [id],
      )) as _i4.TravelEntry?);

  @override
  _i6.Future<_i4.TravelEntry> update(_i4.TravelEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [entry],
        ),
        returnValue: _i6.Future<_i4.TravelEntry>.value(_FakeTravelEntry_2(
          this,
          Invocation.method(
            #update,
            [entry],
          ),
        )),
      ) as _i6.Future<_i4.TravelEntry>);

  @override
  _i6.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  int getTotalMinutesInRange(
    String? userId,
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalMinutesInRange,
          [
            userId,
            start,
            end,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
